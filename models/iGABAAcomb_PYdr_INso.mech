% # iGABAAcomb_PYdr_INso: Normalized synaptic GABA-Aergic inhibitory

% AES omfg

%     current, with synaptic depression, FROM the interneuron axo-soma TO
%     pyramidal dendrite PYdr<-INso connection used in the DynaSim
%     implementation of (Krishnan et al., 2016). Note that in the original
%     code, the class for this current is called GABA_A_D2, INso compartments
%     are called CX, IN, or CX_SOMA, and PYdr compartments are called CX or
%     CX_DEND. Also note that, instead of using a Heaviside increase in
%     transmitter concentration upon spike detection, we used the (1 +
%     tanh(V/4)) formulation from (Ermentrout & Kopell, 1998) for our spike
%     detector and transmitter concentration model.
%
% - Note: Despite the paper, and its parents papers, specifying depression only
%     for "intracortical excitatory connections", in the original code,
%     synaptic depression does appear to be implemented and turned on for
%     GABA_A_D2, thus we include it. Relatedly, in the parent codebase of
%     (Bazhenov et al., 2002), synaptic depression is implemented but de facto
%     turned off by initializing `Use` to 0 in file "neur271.c" line 1104.
%
% - Source: This was built from the original paper's code, using "currents.h"
%     lines 219, 901-942, 1258, 1280-1281, "currents.cpp" lines 707-774,
%     and "network.cfg" line 38.
%
% - Dependencies:
%     - netconNearestNeighbors.m
%
% - References:
%     - Bazhenov M, Timofeev I, Steriade M, Sejnowski TJ. Model of
%         thalamocortical slow-wave sleep oscillations and transitions to
%         activated states. The Journal of Neuroscience. 2002;22: 8691–8704.
%     - Ermentrout GB, Kopell N. Fine structure of neural spiking and
%         synchronization in the presence of conduction delays. Proceedings of
%         the National Academy of Sciences. 1998;95: 1259–1264.
%     - Krishnan GP, Chauvette S, Shamie I, Soltani S, Timofeev I, Cash SS, et
%         al. Cellular and neurochemical basis of sleep stages in the
%         thalamocortical network. eLife. 2016;5: e18607
%
% - Tags: synapse, connection, inhibition, gabaa
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% # iMiniGABAA_PYdr_INso: Normalized synaptic randomized "mini" GABA-Aergic
%     inhibitory current FROM the interneuron axo-soma compartment TO pyramidal
%     dendrite PYdr<-INso connection used in the DynaSim implementation of
%     (Krishnan et al., 2016). Note that in the original code, the class for
%     this current is called GABA_A_D2, INso are called CX, CX_SOMA, IN, or
%     FS1, and PYdr are called CX or CX_DEND. Also note that, instead of using
%     a Heaviside increase in transmitter concentration upon spike detection,
%     we used the (1 + tanh(V/4)) formulation from (Ermentrout & Kopell, 1998)
%     for our spike detector and transmitter concentration model.
%
% - Source: This was built from the original paper's code, using "currents.h"
%     lines 901-942, 1258, 1280-1281, "currents.cpp" lines 707-774, and
%     "network.cfg" line 38.
%
% - Dependencies:
%     - netconNearestNeighbors.m
%     - newReleaseUpdate.m
%
% - References:
%     - Ermentrout GB, Kopell N. Fine structure of neural spiking and
%         synchronization in the presence of conduction delays. Proceedings of
%         the National Academy of Sciences. 1998;95: 1259–1264.
%     - Krishnan GP, Chauvette S, Shamie I, Soltani S, Timofeev I, Cash SS, et
%         al. Cellular and neurochemical basis of sleep stages in the
%         thalamocortical network. eLife. 2016;5: e18607
%
% - Tags: synapse, connection, inhibition, gabaa
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parameters
%

% Parameters
%
% For the INso to PYdr connection, the conductance is given by the original
%     paper "absolutely" as 0.02 uS. We first need to normalize this value over
%     the area of the target cell and convert the conductance to mS/cm^2. We do
%     this by converting uS to mS and dividing by the area of the target PYdr
%     cells:
%
%    0.02 uS * (1 mS / 1000 uS) * (1 / (165e-6 cm^2)) = 0.12 mS/cm^2
%
gMiniGABAA = 0.12 % mS/cm^2
EGABAA = -70        % mV
neMiniIC = 75
neMiniNoiseIC = 20
laMiniIC = 0
laMiniNoiseIC = 0

miniFreq = 20 % in Hz
% This is used both for comparing floats the correct way in
%     `IMiniGABAA_PYdr_INso_read`, and as a minimum in the
%     `newReleaseUpdate` function.
epsilon = 0.000001

% In the original code, this sleep stage experimental factor is represented by
%     `fac_GABA_D2`
fac_MiniGABAA_PYdr_INso = 1

% This is our DynaSim-varied, cell-type-NONspecific adjustment factor
fac_GABAA_cort_large_vary = 0

% Propofol parameters:
propofolMiniCondMult = 1



% For the INso to PYdr connection, the conductance is given by the original
%     paper "absolutely" as 0.024 uS. We first need to normalize this value
%     over the area of the target cell and convert the conductance to mS/cm^2.
%     We do this by converting uS to mS and dividing by the area of the target
%     PYdr compartments:
%
%    0.024 uS * (1 mS / 1000 uS) * (1 / (165e-6 cm^2)) = 0.15 mS/cm^2
%
gGABAA = 0.15  % mS/cm^2
EGABAA = -70   % mV
sGABAAIC = 0.1
sGABAANoiseIC = 0.1
deprGABAAIC = 0.9
deprGABAANoiseIC = 0.1

% Note that alpha rate here corresponds to the inverse of the rise  time constant, 1/tauR, and
%        the beta rate here corresponds to the inverse of the decay time constant, 1/tauD
% alpha = 0.53 % ms^-1
% beta  = 0.18 % ms^-1
alpha = 10 % ms^-1
beta  = 0.25 % ms^-1

% In the original code, this sleep stage experimental factor is represented by
%     `fac_GABA_D2`
fac_GABAAcomb_PYdr_INso = 1

% This is our DynaSim-varied, cell-type-NONspecific adjustment factor
fac_GABAA_cort_large_vary = 0

% Synaptic depression parameters:
% The proportion of total "resources" used in each action potential
% In the original code, this is `Use`
resUse = 0.07  % unitless
resUseMini = 0  % unitless
% In the original code, this is `Tr`
tauRecov = 700 % in ms

% Propofol parameters:
propofolTauMult =  1
propofolCondMult = 1

% Connective radius, aka how many target cells each source cell connects to,
%     from the source's perspective.
radius = 5

% We also need to normalize the conductance in mS/cm^2 by the number of
%     connections each target cell is receiving on average, so that the TOTAL sum
%     of their conductive inputs adds to our overall maximal conductance above.
normalizingFactor = min(((2*radius + 1) / (N_post/N_pre)), N_pre)

% Keep connections to compartment with the same index
removeRecurrentBool = 0
% Note that what is passed is 2x the radius
netcon = netconNearestNeighbors(2*radius, N_pre, N_post, removeRecurrentBool)

% Functions
% This checks for if there has been enough time since the last spike AND the
%     last mini, similar to, in the original code, "currents.cpp" line 514.
% AES
% checkTime(t,lastRelease,newRelease) = ((t-tspike_pre)>100).*((t-lastRelease)>newRelease)
checkTime(t,lastRelease,newRelease) = ((t-tspike_pre)>70).*((t-lastRelease)>newRelease)


% Unfortunately, due to the way DynaSim works, the "lastRelease" state variable
%     is updated AFTER the current function "IMiniGABAA_PYdr_INso" is used
%     in the dv/dt of the target cell, but BEFORE the monitors are calculated.
%     And because lastRelease is not a "true" state variable in the biophysical
%     sense, but instead a "hack" for us to track the last mini time, we have
%     to use DIFFERENT time checks (therefore two different functions) for how
%     the minis affect the simulation, vs how we actually read out the minis'
%     contribution themselves. Hence, for data visualization purposes, we only
%     need to monitor "IMiniGABAA_PYdr_INso_read".
% In other words, this is the function actually used in the simulation:
IMiniGABAA_PYdr_INso(X,t,lastRelease,newRelease) = -(checkTime(t,lastRelease,newRelease).*(fac_MiniGABAA_PYdr_INso+fac_GABAA_cort_large_vary).*propofolMiniCondMult.*gMiniGABAA/normalizingFactor)*netcon.*(X-EGABAA)

% And this is the function that communicates the output for our analysis:
read_IMiniGABAA_PYdr_INso(X,t,lastRelease) = -((abs(t-lastRelease)<epsilon).*(fac_MiniGABAA_PYdr_INso+fac_GABAA_cort_large_vary).*propofolMiniCondMult.*gMiniGABAA/normalizingFactor)*netcon.*(X-EGABAA)

IGABAAcomb_PYdr_INso(X,s,depr) = -(fac_GABAAcomb_PYdr_INso+fac_GABAA_cort_large_vary)*propofolCondMult*gGABAA/normalizingFactor.*((depr.*s)*netcon).*(X-EGABAA)

% This way we record the synaptic currents!
monitor read_IMiniGABAA_PYdr_INso
monitor IGABAAcomb_PYdr_INso


% ODEs and ICs
% The "state" of the newRelease state variable is a random minimum AMOUNT of
%     time until the next mini can happen for that synapse. (This is where the
%     magic happens)
% Note that `checkTime` is an internal function defined above, but
%     `newReleaseUpdate` is an external function defined in
%     `newReleaseUpdate.m`.
newRelease' = checkTime(t,lastRelease,newRelease).*((newReleaseUpdate((t-tspike_pre),miniFreq,epsilon,N_pre) - newRelease)./dt)
newRelease(0) = neMiniIC+neMiniNoiseIC.*rand(1,N_pre)

% The "state" of the lastRelease state variable is the ACTUAL time of the
% previous mini
lastRelease' = checkTime(t,lastRelease,newRelease).*((t - lastRelease)./dt)
lastRelease(0) = laMiniIC+laMiniNoiseIC.*rand(1,N_pre)

s' = alpha.*(1 + tanh(X_pre./4)).*(1-s) - (beta/propofolTauMult).*s
s(0) = sGABAAIC+sGABAANoiseIC.*rand(1,N_pre)

% This represents the amount of synaptic resources available
depr' = (((t-tspike_pre)<=dt).*(((1 - (1 - depr.*(1-resUse)).*(abs(-(t-tspike_pre)/tauRecov)<10).*exp(-(t-tspike_pre)./tauRecov))-depr)./dt)) + (checkTime(t,lastRelease,newRelease).*(((1 - (1 - depr.*(1-resUseMini)).*(abs(-(t-tspike_pre)/tauRecov)<10).*exp(-(t-tspike_pre)./tauRecov))-depr)./dt))
depr(0) = deprGABAAIC+deprGABAANoiseIC*rand(1,N_pre)

% Linker
@current += IGABAAcomb_PYdr_INso(X_post,s,depr) + IMiniGABAA_PYdr_INso(X,t,lastRelease,newRelease)
